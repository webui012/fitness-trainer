import React from 'react';
import PropTypes from 'prop-types';
import loadScript from 'load-script2';

var eventNames = {
  ready: 'onReady',
  stateChange: 'onStateChange',
  playbackQualityChange: 'onPlaybackQualityChange',
  playbackRateChange: 'onPlaybackRateChange',
  error: 'onError',
  apiChange: 'onApiChange'
};

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};





var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();





var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};











var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};











var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

/* global window */
function loadSdk() {
  return new Promise(function (resolve, reject) {
    if (_typeof(window.YT) === 'object' && typeof window.YT.ready === 'function') {
      // A YouTube SDK is already loaded, so reuse that
      window.YT.ready(function () {
        resolve(window.YT);
      });
      return;
    }

    loadScript('https://www.youtube.com/iframe_api', function (err) {
      if (err) {
        reject(err);
      }
      window.YT.ready(function () {
        resolve(window.YT);
      });
    });
  });
}

var sdk = null;
function getSdk() {
  if (!sdk) {
    sdk = loadSdk();
  }
  return sdk;
}

var YouTube = function (_React$Component) {
  inherits(YouTube, _React$Component);

  function YouTube() {
    var _temp, _this, _ret;

    classCallCheck(this, YouTube);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.onPlayerReady = function (event) {
      if (typeof _this.props.volume !== 'undefined') {
        event.target.setVolume(_this.props.volume * 100);
      }
      if (typeof _this.props.muted !== 'undefined') {
        if (_this.props.muted) {
          event.target.mute();
        } else {
          event.target.unMute();
        }
      }
      if (typeof _this.props.suggestedQuality !== 'undefined') {
        event.target.setPlaybackQuality(_this.props.suggestedQuality);
      }
      if (typeof _this.props.playbackRate !== 'undefined') {
        event.target.setPlaybackRate(_this.props.playbackRate);
      }

      _this.resolvePlayer(event.target);
    }, _this.onPlayerStateChange = function (event) {
      var State = YT.PlayerState; // eslint-disable-line no-undef
      switch (event.data) {
        case State.CUED:
          _this.props.onCued(event);
          break;
        case State.BUFFERING:
          _this.props.onBuffering(event);
          break;
        case State.PAUSED:
          _this.props.onPause(event);
          break;
        case State.PLAYING:
          _this.props.onPlaying(event);
          break;
        case State.ENDED:
          _this.props.onEnd(event);
          break;
        default:
        // Nothing
      }
    }, _this.refContainer = function (container) {
      _this.container = container;
    }, _temp), possibleConstructorReturn(_this, _ret);
  }

  YouTube.prototype.componentDidMount = function componentDidMount() {
    this.createPlayer();
  };

  YouTube.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    var _this2 = this;

    var changes = Object.keys(this.props).filter(function (name) {
      return _this2.props[name] !== prevProps[name];
    });

    this.updateProps(changes);
  };

  YouTube.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this.playerInstance) {
      this.playerInstance.destroy();
    }
  };

  /**
   * @private
   */
  YouTube.prototype.getPlayerParameters = function getPlayerParameters() {
    return {
      autoplay: this.props.autoplay,
      cc_load_policy: this.props.showCaptions ? 1 : 0,
      controls: this.props.controls ? 1 : 0,
      disablekb: this.props.disableKeyboard ? 1 : 0,
      fs: this.props.allowFullscreen ? 1 : 0,
      hl: this.props.lang,
      iv_load_policy: this.props.annotations ? 1 : 3,
      start: this.props.startSeconds,
      end: this.props.endSeconds,
      modestbranding: this.props.modestBranding ? 1 : 0,
      playsinline: this.props.playsInline ? 1 : 0,
      rel: this.props.showRelatedVideos ? 1 : 0,
      showinfo: this.props.showInfo ? 1 : 0
    };
  };

  /**
   * @private
   */


  YouTube.prototype.getInitialOptions = function getInitialOptions() {
    return {
      videoId: this.props.video,
      width: this.props.width,
      height: this.props.height,
      playerVars: this.getPlayerParameters(),
      events: {
        onReady: this.onPlayerReady,
        onStateChange: this.onPlayerStateChange
      }
    };
  };

  /**
   * @private
   */


  YouTube.prototype.updateProps = function updateProps(propNames) {
    var _this3 = this;

    this.player.then(function (player) {
      propNames.forEach(function (name) {
        var value = _this3.props[name];
        switch (name) {
          case 'muted':
            if (value) {
              player.mute();
            } else {
              player.unMute();
            }
            break;
          case 'suggestedQuality':
            player.setPlaybackQuality(value);
            break;
          case 'volume':
            player.setVolume(value * 100);
            break;
          case 'paused':
            if (value && player.getPlayerState() !== 2) {
              player.pauseVideo();
            } else if (!value && player.getPlayerState() === 2) {
              player.playVideo();
            }
            break;
          case 'id':
          case 'className':
          case 'width':
          case 'height':
            player.getIframe()[name] = value; // eslint-disable-line no-param-reassign
            break;
          case 'video':
            if (!value) {
              player.stopVideo();
            } else {
              player.loadVideoById({
                videoId: value,
                startSeconds: _this3.props.startSeconds || 0,
                endSeconds: _this3.props.endSeconds
              });
            }
            break;
          default:
          // Nothing
        }
      });
    });
  };

  /**
   * @private
   */


  YouTube.prototype.createPlayer = function createPlayer() {
    var _this4 = this;

    this.player = getSdk().then(function (YT) {
      return new Promise(function (resolve) {
        _this4.resolvePlayer = resolve;

        var player = new YT.Player(_this4.container, _this4.getInitialOptions());
        // Store the instance directly so we can destroy it sync in
        // `componentWilLUnmount`.
        _this4.playerInstance = player;

        Object.keys(eventNames).forEach(function (ytName) {
          var reactName = eventNames[ytName];
          player.addEventListener(ytName, function (event) {
            if (_this4.props[reactName]) {
              _this4.props[reactName](event);
            }
          });
        });
      });
    });

    if (typeof this.props.volume === 'number') {
      this.updateProps(['volume']);
    }
  };

  /**
   * @private
   */


  YouTube.prototype.render = function render() {
    return React.createElement('div', {
      id: this.props.id,
      className: this.props.className,
      ref: this.refContainer
    });
  };

  return YouTube;
}(React.Component);

YouTube.defaultProps = {
  autoplay: false,
  showCaptions: false,
  controls: true,
  disableKeyboard: false,
  allowFullscreen: true,
  annotations: true,
  modestBranding: false,
  playsInline: false,
  showRelatedVideos: true,
  showInfo: true,
  onCued: function onCued() {},
  onBuffering: function onBuffering() {},
  onPlaying: function onPlaying() {},
  onPause: function onPause() {},
  onEnd: function onEnd() {}
};
YouTube.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * An 11-character string representing a YouTube video ID..
   */
  video: PropTypes.string,
  /**
   * DOM ID for the player element.
   */
  id: PropTypes.string,
  /**
   * CSS className for the player element.
   */
  className: PropTypes.string,
  /**
   * Width of the player element.
   */
  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  /**
   * Height of the player element.
   */
  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

  /**
   * Pause the video.
   */
  paused: PropTypes.bool, // eslint-disable-line react/no-unused-prop-types

  // Player parameters

  /**
   * Whether the video should start playing automatically.
   *
   * https://developers.google.com/youtube/player_parameters#autoplay
   */
  autoplay: PropTypes.bool,
  /**
   * Whether to show captions below the video.
   *
   * https://developers.google.com/youtube/player_parameters#cc_load_policy
   */
  showCaptions: PropTypes.bool,
  /**
   * Whether to show video controls.
   *
   * https://developers.google.com/youtube/player_parameters#controls
   */
  controls: PropTypes.bool,
  /**
   * Ignore keyboard controls.
   *
   * https://developers.google.com/youtube/player_parameters#disablekb
   */
  disableKeyboard: PropTypes.bool,
  /**
   * Whether to display the fullscreen button.
   *
   * https://developers.google.com/youtube/player_parameters#fs
   */
  allowFullscreen: PropTypes.bool,
  /**
   * The player's interface language. The parameter value is an ISO 639-1
   * two-letter language code or a fully specified locale.
   *
   * https://developers.google.com/youtube/player_parameters#hl
   */
  lang: PropTypes.string,
  /**
   * Whether to show annotations on top of the video.
   *
   * https://developers.google.com/youtube/player_parameters#iv_load_policy
   */
  annotations: PropTypes.bool,
  /**
   * Time in seconds at which to start playing the video.
   *
   * https://developers.google.com/youtube/player_parameters#start
   */
  startSeconds: PropTypes.number,
  /**
   * Time in seconds at which to stop playing the video.
   *
   * https://developers.google.com/youtube/player_parameters#end
   */
  endSeconds: PropTypes.number,
  /**
   * Remove most YouTube logos from the player.
   *
   * https://developers.google.com/youtube/player_parameters#modestbranding
   */
  modestBranding: PropTypes.bool,
  /**
   * Whether to play the video inline on iOS, instead of fullscreen.
   *
   * https://developers.google.com/youtube/player_parameters#playsinline
   */
  playsInline: PropTypes.bool,
  /**
   * Whether to show related videos after the video is over.
   *
   * https://developers.google.com/youtube/player_parameters#rel
   */
  showRelatedVideos: PropTypes.bool,
  /**
   * Whether to show video information (uploader, title, etc) before the video
   * starts.
   *
   * https://developers.google.com/youtube/player_parameters#showinfo
   */
  showInfo: PropTypes.bool,

  /**
   * The playback volume, **as a number between 0 and 1**.
   */
  volume: PropTypes.number,

  /**
   * Whether the video's sound should be muted.
   */
  muted: PropTypes.bool,

  /**
   * The suggested playback quality.
   *
   * https://developers.google.com/youtube/iframe_api_reference#Playback_quality
   */
  suggestedQuality: PropTypes.string,
  /**
   * Playback speed.
   *
   * https://developers.google.com/youtube/iframe_api_reference#setPlaybackRate
   */
  playbackRate: PropTypes.number,

  // Events
  /* eslint-disable react/no-unused-prop-types */

  /**
   * Sent when the YouTube player API has loaded.
   */
  onReady: PropTypes.func,
  /**
   * Sent when the player triggers an error.
   */
  onError: PropTypes.func,
  /**
   * Sent when the video is cued and ready to play.
   */
  onCued: PropTypes.func,
  /**
   * Sent when the video is buffering.
   */
  onBuffering: PropTypes.func,
  /**
   * Sent when playback has been started or resumed.
   */
  onPlaying: PropTypes.func,
  /**
   * Sent when playback has been paused.
   */
  onPause: PropTypes.func,
  /**
   * Sent when playback has stopped.
   */
  onEnd: PropTypes.func,
  onStateChange: PropTypes.func,
  onPlaybackRateChange: PropTypes.func,
  onPlaybackQualityChange: PropTypes.func

  /* eslint-enable react/no-unused-prop-types */
} : {};

export default YouTube;
