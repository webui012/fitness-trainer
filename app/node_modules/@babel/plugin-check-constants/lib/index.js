"use strict";

exports.__esModule = true;
exports.default = _default;

var _core = require("@babel/core");

function _default() {
  function statementBeforeExpression(statement, expression) {
    return _core.types.sequenceExpression([_core.types.callExpression(_core.types.functionExpression(null, [], _core.types.blockStatement([statement])), []), expression]);
  }

  return {
    visitor: {
      Scope: function Scope(_ref) {
        var scope = _ref.scope;

        for (var name in scope.bindings) {
          var binding = scope.bindings[name];
          if (binding.kind !== "const") continue;
          var _arr = binding.constantViolations;

          for (var _i = 0; _i < _arr.length; _i++) {
            var violation = _arr[_i];

            var throwNode = _core.types.throwStatement(_core.types.newExpression(_core.types.identifier("Error"), [_core.types.stringLiteral("\"" + name + "\" is read-only")]));

            if (violation.isAssignmentExpression()) {
              violation.get("right").replaceWith(statementBeforeExpression(throwNode, violation.get("right").node));
            } else if (violation.isUpdateExpression()) {
              violation.replaceWith(statementBeforeExpression(throwNode, violation.node));
            } else if (violation.isForXStatement()) {
              violation.ensureBlock();
              violation.node.body.body.unshift(throwNode);
            }
          }
        }
      }
    }
  };
}